diff --git a/src/mesa/main/depthstencil.c b/src/mesa/main/depthstencil.c
index af5c12f..67553a4 100644
--- a/src/mesa/main/depthstencil.c
+++ b/src/mesa/main/depthstencil.c
@@ -84,7 +84,9 @@ alloc_wrapper_storage(struct gl_context *ctx, struct gl_renderbuffer *rb,
    (void) internalFormat;
 
    ASSERT(dsrb->Format == MESA_FORMAT_Z24_S8 ||
+          dsrb->Format == MESA_FORMAT_Z24_S8_REV ||
           dsrb->Format == MESA_FORMAT_Z24_X8 ||
+          dsrb->Format == MESA_FORMAT_Z24_X8_REV ||
           dsrb->Format == MESA_FORMAT_S8_Z24 ||
           dsrb->Format == MESA_FORMAT_X8_Z24);
 
@@ -123,6 +125,11 @@ get_row_z24(struct gl_context *ctx, struct gl_renderbuffer *z24rb, GLuint count,
          dst[i] = src[i] >> 8;
       }
    }
+   else if (dsrb->Format == MESA_FORMAT_Z24_S8_REV) {
+      for (i = 0; i < count; i++) {
+         dst[i] = BSWAP32(src[i]) >> 8;
+      }
+   }
    else {
       assert(dsrb->Format == MESA_FORMAT_S8_Z24);
       for (i = 0; i < count; i++) {
@@ -148,6 +155,11 @@ get_values_z24(struct gl_context *ctx, struct gl_renderbuffer *z24rb, GLuint cou
          dst[i] = temp[i] >> 8;
       }
    }
+   else if (dsrb->Format == MESA_FORMAT_Z24_S8_REV) {
+      for (i = 0; i < count; i++) {
+         dst[i] = BSWAP32(temp[i]) >> 8;
+      }
+   }
    else {
       assert(dsrb->Format == MESA_FORMAT_S8_Z24);
       for (i = 0; i < count; i++) {
@@ -175,6 +187,13 @@ put_row_z24(struct gl_context *ctx, struct gl_renderbuffer *z24rb, GLuint count,
             }
          }
       }
+      else if (dsrb->Format == MESA_FORMAT_Z24_S8_REV) {
+         for (i = 0; i < count; i++) {
+            if (!mask || mask[i]) {
+               dst[i] = BSWAP32(src[i] << 8) | (dst[i] & 0xff000000);
+            }
+         }
+      }
       else {
          assert(dsrb->Format == MESA_FORMAT_S8_Z24);
          for (i = 0; i < count; i++) {
@@ -195,6 +214,13 @@ put_row_z24(struct gl_context *ctx, struct gl_renderbuffer *z24rb, GLuint count,
             }
          }
       }
+      else if (dsrb->Format == MESA_FORMAT_Z24_S8_REV) {
+         for (i = 0; i < count; i++) {
+            if (!mask || mask[i]) {
+               temp[i] = BSWAP32(src[i] << 8) | (temp[i] & 0xff000000);
+            }
+         }
+      }
       else {
          assert(dsrb->Format == MESA_FORMAT_S8_Z24);
          for (i = 0; i < count; i++) {
@@ -226,6 +252,14 @@ put_mono_row_z24(struct gl_context *ctx, struct gl_renderbuffer *z24rb, GLuint c
             }
          }
       }
+      else if (dsrb->Format == MESA_FORMAT_Z24_S8_REV) {
+         const GLuint shiftedVal = *((GLuint *) value) << 8;
+         for (i = 0; i < count; i++) {
+            if (!mask || mask[i]) {
+               dst[i] = BSWAP32(shiftedVal) | (dst[i] & 0xff000000);
+            }
+         }
+      }
       else {
          const GLuint shiftedVal = *((GLuint *) value);
          assert(dsrb->Format == MESA_FORMAT_S8_Z24);
@@ -248,6 +282,14 @@ put_mono_row_z24(struct gl_context *ctx, struct gl_renderbuffer *z24rb, GLuint c
             }
          }
       }
+      else if (dsrb->Format == MESA_FORMAT_Z24_S8_REV) {
+         const GLuint shiftedVal = *((GLuint *) value) << 8;
+         for (i = 0; i < count; i++) {
+            if (!mask || mask[i]) {
+               temp[i] = BSWAP32(shiftedVal) | (temp[i] & 0xff000000);
+            }
+         }
+      }
       else {
          const GLuint shiftedVal = *((GLuint *) value);
          assert(dsrb->Format == MESA_FORMAT_S8_Z24);
@@ -281,6 +323,14 @@ put_values_z24(struct gl_context *ctx, struct gl_renderbuffer *z24rb, GLuint cou
             }
          }
       }
+      else if (dsrb->Format == MESA_FORMAT_Z24_S8_REV) {
+         for (i = 0; i < count; i++) {
+            if (!mask || mask[i]) {
+               GLuint *dst = (GLuint *) dsrb->GetPointer(ctx, dsrb, x[i], y[i]);
+               *dst = BSWAP32(src[i] << 8) | (*dst & 0xff000000);
+            }
+         }
+      }
       else {
          assert(dsrb->Format == MESA_FORMAT_S8_Z24);
          for (i = 0; i < count; i++) {
@@ -302,6 +352,13 @@ put_values_z24(struct gl_context *ctx, struct gl_renderbuffer *z24rb, GLuint cou
             }
          }
       }
+      else if (dsrb->Format == MESA_FORMAT_Z24_S8_REV) {
+         for (i = 0; i < count; i++) {
+            if (!mask || mask[i]) {
+               temp[i] = BSWAP32(src[i] << 8) | (temp[i] & 0xff000000);
+            }
+         }
+      }
       else {
          assert(dsrb->Format == MESA_FORMAT_S8_Z24);
          for (i = 0; i < count; i++) {
@@ -331,6 +388,14 @@ put_mono_values_z24(struct gl_context *ctx, struct gl_renderbuffer *z24rb,
          }
       }
    }
+   else if (dsrb->Format == MESA_FORMAT_Z24_S8_REV) {
+      const GLuint shiftedVal = *((GLuint *) value) << 8;
+      for (i = 0; i < count; i++) {
+         if (!mask || mask[i]) {
+            temp[i] = BSWAP32(shiftedVal) | (temp[i] & 0xff000000);
+         }
+      }
+   }
    else {
       const GLuint shiftedVal = *((GLuint *) value);
       assert(dsrb->Format == MESA_FORMAT_S8_Z24);
@@ -356,7 +421,9 @@ _mesa_new_z24_renderbuffer_wrapper(struct gl_context *ctx,
    struct gl_renderbuffer *z24rb;
 
    ASSERT(dsrb->Format == MESA_FORMAT_Z24_S8 ||
+          dsrb->Format == MESA_FORMAT_Z24_S8_REV ||
           dsrb->Format == MESA_FORMAT_Z24_X8 ||
+          dsrb->Format == MESA_FORMAT_Z24_X8_REV ||
           dsrb->Format == MESA_FORMAT_S8_Z24 ||
           dsrb->Format == MESA_FORMAT_X8_Z24);
    ASSERT(dsrb->DataType == GL_UNSIGNED_INT_24_8_EXT);
@@ -635,7 +702,8 @@ get_row_s8(struct gl_context *ctx, struct gl_renderbuffer *s8rb, GLuint count,
       }
    }
    else {
-      assert(dsrb->Format == MESA_FORMAT_S8_Z24);
+      assert(dsrb->Format == MESA_FORMAT_S8_Z24 ||
+             dsrb->Format == MESA_FORMAT_Z24_S8_REV);
       for (i = 0; i < count; i++) {
          dst[i] = src[i] >> 24;
       }
@@ -666,7 +734,8 @@ get_values_s8(struct gl_context *ctx, struct gl_renderbuffer *s8rb, GLuint count
       }
    }
    else {
-      assert(dsrb->Format == MESA_FORMAT_S8_Z24);
+      assert(dsrb->Format == MESA_FORMAT_S8_Z24 ||
+             dsrb->Format == MESA_FORMAT_Z24_S8_REV);
       for (i = 0; i < count; i++) {
          dst[i] = temp[i] >> 24;
       }
@@ -701,7 +770,8 @@ put_row_s8(struct gl_context *ctx, struct gl_renderbuffer *s8rb, GLuint count,
          }
       }
       else {
-         assert(dsrb->Format == MESA_FORMAT_S8_Z24);
+         assert(dsrb->Format == MESA_FORMAT_S8_Z24 ||
+                dsrb->Format == MESA_FORMAT_Z24_S8_REV);
          for (i = 0; i < count; i++) {
             if (!mask || mask[i]) {
                dst[i] = (dst[i] & 0xffffff) | (src[i] << 24);
@@ -728,7 +798,8 @@ put_row_s8(struct gl_context *ctx, struct gl_renderbuffer *s8rb, GLuint count,
          }
       }
       else {
-         assert(dsrb->Format == MESA_FORMAT_S8_Z24);
+         assert(dsrb->Format == MESA_FORMAT_S8_Z24 ||
+                dsrb->Format == MESA_FORMAT_Z24_S8_REV);
          for (i = 0; i < count; i++) {
             if (!mask || mask[i]) {
                temp[i] = (temp[i] & 0xffffff) | (src[i] << 24);
@@ -767,7 +838,8 @@ put_mono_row_s8(struct gl_context *ctx, struct gl_renderbuffer *s8rb, GLuint cou
          }
       }
       else {
-         assert(dsrb->Format == MESA_FORMAT_S8_Z24);
+         assert(dsrb->Format == MESA_FORMAT_S8_Z24 ||
+                dsrb->Format == MESA_FORMAT_Z24_S8_REV);
          for (i = 0; i < count; i++) {
             if (!mask || mask[i]) {
                dst[i] = (dst[i] & 0xffffff) | (val << 24);
@@ -794,7 +866,8 @@ put_mono_row_s8(struct gl_context *ctx, struct gl_renderbuffer *s8rb, GLuint cou
          }
       }
       else {
-         assert(dsrb->Format == MESA_FORMAT_S8_Z24);
+         assert(dsrb->Format == MESA_FORMAT_S8_Z24 ||
+                dsrb->Format == MESA_FORMAT_Z24_S8_REV);
          for (i = 0; i < count; i++) {
             if (!mask || mask[i]) {
                temp[i] = (temp[i] & 0xffffff) | (val << 24);
@@ -835,7 +908,8 @@ put_values_s8(struct gl_context *ctx, struct gl_renderbuffer *s8rb, GLuint count
          }
       }
       else {
-         assert(dsrb->Format == MESA_FORMAT_S8_Z24);
+         assert(dsrb->Format == MESA_FORMAT_S8_Z24 ||
+                dsrb->Format == MESA_FORMAT_Z24_S8_REV);
          for (i = 0; i < count; i++) {
             if (!mask || mask[i]) {
                GLuint *dst = (GLuint *) dsrb->GetPointer(ctx, dsrb, x[i], y[i]);
@@ -863,7 +937,8 @@ put_values_s8(struct gl_context *ctx, struct gl_renderbuffer *s8rb, GLuint count
          }
       }
       else {
-         assert(dsrb->Format == MESA_FORMAT_S8_Z24);
+         assert(dsrb->Format == MESA_FORMAT_S8_Z24 ||
+                dsrb->Format == MESA_FORMAT_Z24_S8_REV);
          for (i = 0; i < count; i++) {
             if (!mask || mask[i]) {
                temp[i] = (temp[i] & 0xffffff) | (src[i] << 24);
@@ -899,7 +974,8 @@ put_mono_values_s8(struct gl_context *ctx, struct gl_renderbuffer *s8rb, GLuint
       }
    }
    else {
-      assert(dsrb->Format == MESA_FORMAT_S8_Z24);
+      assert(dsrb->Format == MESA_FORMAT_S8_Z24 ||
+             dsrb->Format == MESA_FORMAT_Z24_S8_REV);
       for (i = 0; i < count; i++) {
          if (!mask || mask[i]) {
             temp[i] = (temp[i] & 0xffffff) | (val << 24);
@@ -921,6 +997,7 @@ _mesa_new_s8_renderbuffer_wrapper(struct gl_context *ctx, struct gl_renderbuffer
    struct gl_renderbuffer *s8rb;
 
    ASSERT(dsrb->Format == MESA_FORMAT_Z24_S8 ||
+          dsrb->Format == MESA_FORMAT_Z24_S8_REV ||
           dsrb->Format == MESA_FORMAT_S8_Z24 ||
           dsrb->Format == MESA_FORMAT_Z32_FLOAT_X24S8);
    ASSERT(dsrb->DataType == GL_UNSIGNED_INT_24_8_EXT ||

