--- src/mesa/main/texstore.c.orig	2012-08-14 10:54:39.000000000 -0700
+++ src/mesa/main/texstore.c	2012-10-30 22:39:26.000000000 -0700
@@ -1005,6 +1005,60 @@
 
 
 /**
+ * Teximage storage routine for when simple byte swapping will do.
+ * No pixel transfer operations or special texel encodings allowed.
+ * 1D, 2D and 3D images supported.
+ */
+static void
+byteswap_texture(struct gl_context *ctx,
+	         GLuint dimensions,
+                 gl_format dstFormat,
+                 GLint dstXoffset, GLint dstYoffset, GLint dstZoffset,
+                 GLint dstRowStride,
+                 GLubyte **dstSlices,
+                 GLint srcWidth, GLint srcHeight, GLint srcDepth,
+                 GLenum srcFormat, GLenum srcType,
+                 const GLvoid *srcAddr,
+                 const struct gl_pixelstore_attrib *srcPacking)
+{
+   const GLint srcRowStride = _mesa_image_row_stride(srcPacking, srcWidth,
+                                                     srcFormat, srcType);
+   const GLint srcImageStride = _mesa_image_image_stride(srcPacking,
+                                      srcWidth, srcHeight, srcFormat, srcType);
+   const GLubyte *srcImage = (const GLubyte *) _mesa_image_address(dimensions,
+        srcPacking, srcAddr, srcWidth, srcHeight, srcFormat, srcType, 0, 0, 0);
+   const GLuint texelBytes = _mesa_get_format_bytes(dstFormat);
+   const GLint bytesPerRow = srcWidth * texelBytes;
+   GLint img, row, i;
+
+   for (img = 0; img < srcDepth; img++) {
+      const GLubyte *srcRow = srcImage;
+      GLubyte *dstRow = dstSlices[dstZoffset + img]
+         + dstYoffset * dstRowStride
+         + dstXoffset * texelBytes;
+      for (row = 0; row < srcHeight; row++) {
+         if (texelBytes == 2) {
+            GLushort *src = srcRow;
+            GLushort *dst = dstRow;
+            for (i = 0; i < bytesPerRow; i += 2)
+               *dst++ = BSWAP16(*src++);
+         } else {
+            ASSERT(texelBytes == 4);
+            GLuint *src = srcRow;
+            GLuint *dst = dstRow;
+            for (i = 0; i < bytesPerRow; i += 4)
+               *dst++ = BSWAP32(*src++);
+         }
+         dstRow += dstRowStride;
+         srcRow += srcRowStride;
+      }
+      srcImage += srcImageStride;
+   }
+}
+
+
+
+/**
  * Store a 32-bit integer or float depth component texture image.
  */
 static GLboolean
@@ -1091,9 +1145,10 @@
 _mesa_texstore_z24_x8(TEXSTORE_PARAMS)
 {
    const GLuint depthScale = 0xffffff;
+   const GLboolean swapBytes = srcPacking->SwapBytes != (dstFormat == MESA_FORMAT_Z24_X8_REV);
 
    (void) dims;
-   ASSERT(dstFormat == MESA_FORMAT_Z24_X8);
+   ASSERT(dstFormat == MESA_FORMAT_Z24_X8 || dstFormat == MESA_FORMAT_Z24_X8_REV);
 
    {
       /* general path */
@@ -1109,7 +1164,10 @@
                                     GL_UNSIGNED_INT, dst,
                                     depthScale, srcType, src, srcPacking);
             for (i = 0; i < srcWidth; i++)
-               dst[i] <<= 8;
+               if (swapBytes)
+                  dst[i] = BSWAP32(dst[i] << 8);
+               else
+                  dst[i] <<= 8;
             dstRow += dstRowStride;
          }
       }
@@ -1125,22 +1183,31 @@
 _mesa_texstore_z16(TEXSTORE_PARAMS)
 {
    const GLuint depthScale = 0xffff;
+   const GLboolean swapBytes = srcPacking->SwapBytes != (dstFormat == MESA_FORMAT_Z16_REV);
+
    (void) dims;
-   ASSERT(dstFormat == MESA_FORMAT_Z16);
+   ASSERT(dstFormat == MESA_FORMAT_Z16 || dstFormat == MESA_FORMAT_Z16_REV);
    ASSERT(_mesa_get_format_bytes(dstFormat) == sizeof(GLushort));
 
    if (ctx->Pixel.DepthScale == 1.0f &&
        ctx->Pixel.DepthBias == 0.0f &&
-       !srcPacking->SwapBytes &&
        baseInternalFormat == GL_DEPTH_COMPONENT &&
        srcFormat == GL_DEPTH_COMPONENT &&
        srcType == GL_UNSIGNED_SHORT) {
-      /* simple memcpy path */
-      memcpy_texture(ctx, dims,
-                     dstFormat,
-                     dstRowStride, dstSlices,
-                     srcWidth, srcHeight, srcDepth, srcFormat, srcType,
-                     srcAddr, srcPacking);
+       if (!swapBytes) {
+           /* simple memcpy path */
+           memcpy_texture(ctx, dims,
+                         dstFormat, dstXoffset, dstYoffset, dstZoffset,
+                         dstRowStride, dstSlices,
+                         srcWidth, srcHeight, srcDepth, srcFormat, srcType,
+                         srcAddr, srcPacking);
+       } else {
+           byteswap_texture(ctx, dims,
+                           dstFormat, dstXoffset, dstYoffset, dstZoffset,
+                           dstRowStride, dstSlices,
+                           srcWidth, srcHeight, srcDepth, srcFormat, srcType,
+                           srcAddr, srcPacking);
+       }
    }
    else {
       /* general path */
@@ -1758,6 +1825,84 @@
 }
 
 
+static GLboolean
+_mesa_texstore_argb2101010_rev(TEXSTORE_PARAMS)
+{
+   const GLuint texelBytes = _mesa_get_format_bytes(dstFormat);
+   const GLenum baseFormat = _mesa_get_format_base_format(dstFormat);
+
+   ASSERT(dstFormat == MESA_FORMAT_ARGB2101010_REV);
+   ASSERT(texelBytes == 4);
+
+   if (0 && !ctx->_ImageTransferState &&
+       !srcPacking->SwapBytes &&
+       dstFormat == MESA_FORMAT_ARGB2101010_REV &&
+       srcFormat == GL_BGRA &&
+       srcType == GL_UNSIGNED_INT_2_10_10_10_REV &&
+       baseInternalFormat == GL_RGBA) {
+      /* simple memcpy path */
+      memcpy_texture(ctx, dims,
+                     dstFormat, dstXoffset, dstYoffset, dstZoffset,
+                     dstRowStride, dstSlices,
+                     srcWidth, srcHeight, srcDepth, srcFormat, srcType,
+                     srcAddr, srcPacking);
+   }
+   else {
+      /* general path */
+      const GLfloat *tempImage = _mesa_make_temp_float_image(ctx, dims,
+                                                 baseInternalFormat,
+                                                 baseFormat,
+                                                 srcWidth, srcHeight, srcDepth,
+                                                 srcFormat, srcType, srcAddr,
+                                                 srcPacking,
+                                                 ctx->_ImageTransferState);
+      const GLfloat *src = tempImage;
+      GLint img, row, col;
+      if (!tempImage)
+         return GL_FALSE;
+      for (img = 0; img < srcDepth; img++) {
+         GLubyte *dstRow = dstSlices[dstZoffset + img]
+            + dstYoffset * dstRowStride
+            + dstXoffset * texelBytes;
+         if (baseInternalFormat == GL_RGBA) {
+            for (row = 0; row < srcHeight; row++) {
+               GLuint *dstUI = (GLuint *) dstRow;
+               for (col = 0; col < srcWidth; col++) {
+                  GLushort a,r,g,b;
+
+                  UNCLAMPED_FLOAT_TO_USHORT(a, src[ACOMP]);
+                  UNCLAMPED_FLOAT_TO_USHORT(r, src[RCOMP]);
+                  UNCLAMPED_FLOAT_TO_USHORT(g, src[GCOMP]);
+                  UNCLAMPED_FLOAT_TO_USHORT(b, src[BCOMP]);
+                  dstUI[col] = PACK_COLOR_2101010_REV_US(a, r, g, b);
+                  src += 4;
+               }
+               dstRow += dstRowStride;
+            }
+         } else if (baseInternalFormat == GL_RGB) {
+            for (row = 0; row < srcHeight; row++) {
+               GLuint *dstUI = (GLuint *) dstRow;
+               for (col = 0; col < srcWidth; col++) {
+                  GLushort r,g,b;
+
+                  UNCLAMPED_FLOAT_TO_USHORT(r, src[RCOMP]);
+                  UNCLAMPED_FLOAT_TO_USHORT(g, src[GCOMP]);
+                  UNCLAMPED_FLOAT_TO_USHORT(b, src[BCOMP]);
+                  dstUI[col] = PACK_COLOR_2101010_REV_US(0xffff, r, g, b);
+                  src += 4;
+               }
+               dstRow += dstRowStride;
+            }
+         } else {
+            ASSERT(0);
+         }
+      }
+      free((void *) tempImage);
+   }
+   return GL_TRUE;
+}
+
+
 /**
  * Do texstore for 2-channel, 4-bit/channel, unsigned normalized formats.
  */
@@ -1817,13 +1962,12 @@
 
    if (!ctx->_ImageTransferState &&
        !srcPacking->SwapBytes &&
-       ((dstFormat == MESA_FORMAT_AL88 &&
+       ((dstFormat == (littleEndian ? MESA_FORMAT_AL88 : MESA_FORMAT_AL88_REV) &&
          baseInternalFormat == GL_LUMINANCE_ALPHA &&
          srcFormat == GL_LUMINANCE_ALPHA) ||
-        (dstFormat == MESA_FORMAT_GR88 &&
+        (dstFormat == (littleEndian ? MESA_FORMAT_GR88 : MESA_FORMAT_RG88) &&
          baseInternalFormat == srcFormat)) &&
-       srcType == GL_UNSIGNED_BYTE &&
-       littleEndian) {
+       srcType == GL_UNSIGNED_BYTE) {
       /* simple memcpy path */
       memcpy_texture(ctx, dims,
                      dstFormat,
@@ -1832,7 +1976,6 @@
                      srcAddr, srcPacking);
    }
    else if (!ctx->_ImageTransferState &&
-	    littleEndian &&
 	    srcType == GL_UNSIGNED_BYTE &&
 	    can_swizzle(baseInternalFormat) &&
 	    can_swizzle(srcFormat)) {
@@ -1933,13 +2076,12 @@
 
    if (!ctx->_ImageTransferState &&
        !srcPacking->SwapBytes &&
-       ((dstFormat == MESA_FORMAT_AL1616 &&
+       ((dstFormat == (littleEndian ? MESA_FORMAT_AL1616 : MESA_FORMAT_AL1616_REV) &&
          baseInternalFormat == GL_LUMINANCE_ALPHA &&
          srcFormat == GL_LUMINANCE_ALPHA) ||
-        (dstFormat == MESA_FORMAT_RG1616 &&
+        (dstFormat == (littleEndian ? MESA_FORMAT_RG1616 : MESA_FORMAT_RG1616_REV) &&
          baseInternalFormat == srcFormat)) &&
-       srcType == GL_UNSIGNED_SHORT &&
-       littleEndian) {
+       srcType == GL_UNSIGNED_SHORT) {
       /* simple memcpy path */
       memcpy_texture(ctx, dims,
                      dstFormat,
@@ -2000,18 +2142,23 @@
 {
    const GLboolean littleEndian = _mesa_little_endian();
    const GLenum baseFormat = _mesa_get_format_base_format(dstFormat);
+   const GLboolean isRev = dstFormat == MESA_FORMAT_R16_REV ||
+                           dstFormat == MESA_FORMAT_A16_REV ||
+                           dstFormat == MESA_FORMAT_L16_REV ||
+                           dstFormat == MESA_FORMAT_I16_REV;
 
    ASSERT(dstFormat == MESA_FORMAT_R16 ||
           dstFormat == MESA_FORMAT_A16 ||
           dstFormat == MESA_FORMAT_L16 ||
-          dstFormat == MESA_FORMAT_I16);
+          dstFormat == MESA_FORMAT_I16 ||
+          isRev);
    ASSERT(_mesa_get_format_bytes(dstFormat) == 2);
 
    if (!ctx->_ImageTransferState &&
        !srcPacking->SwapBytes &&
        baseInternalFormat == srcFormat &&
        srcType == GL_UNSIGNED_SHORT &&
-       littleEndian) {
+       littleEndian != isRev) {
       /* simple memcpy path */
       memcpy_texture(ctx, dims,
                      dstFormat,
@@ -2040,7 +2187,10 @@
 	       GLushort r;
 
 	       UNCLAMPED_FLOAT_TO_USHORT(r, src[0]);
-	       dstUS[col] = r;
+               if (isRev)
+                  dstUS[col] = BSWAP16(r);
+               else
+                  dstUS[col] = r;
 	       src += 1;
 	    }
             dstRow += dstRowStride;
@@ -2055,14 +2205,16 @@
 static GLboolean
 _mesa_texstore_rgba_16(TEXSTORE_PARAMS)
 {
+   const GLboolean littleEndian = _mesa_little_endian();
    const GLenum baseFormat = _mesa_get_format_base_format(dstFormat);
 
-   ASSERT(dstFormat == MESA_FORMAT_RGBA_16);
+   ASSERT(dstFormat == MESA_FORMAT_RGBA_16 || dstFormat == MESA_FORMAT_RGBA_16_REV);
    ASSERT(_mesa_get_format_bytes(dstFormat) == 8);
 
    if (!ctx->_ImageTransferState &&
        !srcPacking->SwapBytes &&
        baseInternalFormat == GL_RGBA &&
+       dstFormat == (littleEndian ? MESA_FORMAT_RGBA_16 : MESA_FORMAT_RGBA_16_REV) &&
        srcFormat == GL_RGBA &&
        srcType == GL_UNSIGNED_SHORT) {
       /* simple memcpy path */
@@ -2096,10 +2248,18 @@
                UNCLAMPED_FLOAT_TO_USHORT(g, src[1]);
                UNCLAMPED_FLOAT_TO_USHORT(b, src[2]);
                UNCLAMPED_FLOAT_TO_USHORT(a, src[3]);
-               dstUS[col*4+0] = r;
-               dstUS[col*4+1] = g;
-               dstUS[col*4+2] = b;
-               dstUS[col*4+3] = a;
+
+               if (dstFormat == MESA_FORMAT_RGBA_16) {
+                  dstUS[col*4+0] = r;
+                  dstUS[col*4+1] = g;
+                  dstUS[col*4+2] = b;
+                  dstUS[col*4+3] = a;
+               } else {
+                  dstUS[col*4+0] = BSWAP16(r);
+                  dstUS[col*4+1] = BSWAP16(g);
+                  dstUS[col*4+2] = BSWAP16(b);
+                  dstUS[col*4+3] = BSWAP16(a);
+               }
                src += 4;
             }
             dstRow += dstRowStride;
@@ -2779,7 +2939,8 @@
       = _mesa_image_row_stride(srcPacking, srcWidth, srcFormat, srcType);
    GLint img, row;
 
-   ASSERT(dstFormat == MESA_FORMAT_Z24_S8);
+   ASSERT(dstFormat == MESA_FORMAT_Z24_S8 ||
+          dstFormat == MESA_FORMAT_Z24_S8_REV);
    ASSERT(srcFormat == GL_DEPTH_STENCIL_EXT ||
           srcFormat == GL_DEPTH_COMPONENT ||
           srcFormat == GL_STENCIL_INDEX);
@@ -3018,8 +3179,11 @@
 {
    const GLenum baseFormat = _mesa_get_format_base_format(dstFormat);
    const GLint components = _mesa_components_in_format(baseFormat);
+   const GLboolean swapBytes = srcPacking->SwapBytes !=
+      (dstFormat == MESA_FORMAT_RGBA_FLOAT32_REV);
 
    ASSERT(dstFormat == MESA_FORMAT_RGBA_FLOAT32 ||
+          dstFormat == MESA_FORMAT_RGBA_FLOAT32_REV ||
           dstFormat == MESA_FORMAT_RGB_FLOAT32 ||
           dstFormat == MESA_FORMAT_ALPHA_FLOAT32 ||
           dstFormat == MESA_FORMAT_LUMINANCE_FLOAT32 ||
@@ -3038,7 +3202,7 @@
    ASSERT(_mesa_get_format_bytes(dstFormat) == components * sizeof(GLfloat));
 
    if (!ctx->_ImageTransferState &&
-       !srcPacking->SwapBytes &&
+       !swapBytes &&
        baseInternalFormat == srcFormat &&
        baseInternalFormat == baseFormat &&
        srcType == GL_FLOAT) {
@@ -3067,7 +3231,17 @@
       for (img = 0; img < srcDepth; img++) {
          GLubyte *dstRow = dstSlices[img];
          for (row = 0; row < srcHeight; row++) {
-            memcpy(dstRow, srcRow, bytesPerRow);
+            if (swapBytes) {
+               GLuint *d = (GLuint *)dstRow;
+               union { GLfloat f; GLuint ui; } fui;
+               GLuint i;
+               for (i = 0; i < bytesPerRow / sizeof(GLfloat); i++) {
+                  fui.f = srcRow[i];
+                  d[i] = BSWAP32(fui.ui);
+               }
+            } else {
+               memcpy(dstRow, srcRow, bytesPerRow);
+            }
             dstRow += dstRowStride;
             srcRow += srcWidth * components;
          }
@@ -4012,24 +4186,31 @@
       table[MESA_FORMAT_RGB332] = _mesa_texstore_rgb332;
       table[MESA_FORMAT_A8] = _mesa_texstore_unorm8;
       table[MESA_FORMAT_A16] = _mesa_texstore_unorm16;
+      table[MESA_FORMAT_A16_REV] = _mesa_texstore_unorm16;
       table[MESA_FORMAT_L8] = _mesa_texstore_unorm8;
       table[MESA_FORMAT_L16] = _mesa_texstore_unorm16;
+      table[MESA_FORMAT_L16_REV] = _mesa_texstore_unorm16;
       table[MESA_FORMAT_I8] = _mesa_texstore_unorm8;
       table[MESA_FORMAT_I16] = _mesa_texstore_unorm16;
+      table[MESA_FORMAT_I16_REV] = _mesa_texstore_unorm16;
       table[MESA_FORMAT_YCBCR] = _mesa_texstore_ycbcr;
       table[MESA_FORMAT_YCBCR_REV] = _mesa_texstore_ycbcr;
       table[MESA_FORMAT_R8] = _mesa_texstore_unorm8;
       table[MESA_FORMAT_GR88] = _mesa_texstore_unorm88;
       table[MESA_FORMAT_RG88] = _mesa_texstore_unorm88;
       table[MESA_FORMAT_R16] = _mesa_texstore_unorm16;
+      table[MESA_FORMAT_R16_REV] = _mesa_texstore_unorm16;
       table[MESA_FORMAT_RG1616] = _mesa_texstore_unorm1616;
       table[MESA_FORMAT_RG1616_REV] = _mesa_texstore_unorm1616;
       table[MESA_FORMAT_ARGB2101010] = _mesa_texstore_argb2101010;
+      table[MESA_FORMAT_ARGB2101010_REV] = _mesa_texstore_argb2101010_rev;
       table[MESA_FORMAT_Z24_S8] = _mesa_texstore_z24_s8;
+      table[MESA_FORMAT_Z24_S8_REV] = _mesa_texstore_z24_s8;
       table[MESA_FORMAT_S8_Z24] = _mesa_texstore_s8_z24;
       table[MESA_FORMAT_Z16] = _mesa_texstore_z16;
       table[MESA_FORMAT_X8_Z24] = _mesa_texstore_x8_z24;
       table[MESA_FORMAT_Z24_X8] = _mesa_texstore_z24_x8;
+      table[MESA_FORMAT_Z24_X8_REV] = _mesa_texstore_z24_x8;
       table[MESA_FORMAT_Z32] = _mesa_texstore_z32;
       table[MESA_FORMAT_S8] = _mesa_texstore_s8;
       table[MESA_FORMAT_SRGB8] = _mesa_texstore_srgb8;
@@ -4048,6 +4229,7 @@
       table[MESA_FORMAT_RGBA_DXT3] = _mesa_texstore_rgba_dxt3;
       table[MESA_FORMAT_RGBA_DXT5] = _mesa_texstore_rgba_dxt5;
       table[MESA_FORMAT_RGBA_FLOAT32] = _mesa_texstore_rgba_float32;
+      table[MESA_FORMAT_RGBA_FLOAT32_REV] = _mesa_texstore_rgba_float32;
       table[MESA_FORMAT_RGBA_FLOAT16] = _mesa_texstore_rgba_float16;
       table[MESA_FORMAT_RGB_FLOAT32] = _mesa_texstore_rgba_float32;
       table[MESA_FORMAT_RGB_FLOAT16] = _mesa_texstore_rgba_float16;
@@ -4074,6 +4256,7 @@
       table[MESA_FORMAT_SIGNED_RGB_16] = _mesa_texstore_signed_rgba_16;
       table[MESA_FORMAT_SIGNED_RGBA_16] = _mesa_texstore_signed_rgba_16;
       table[MESA_FORMAT_RGBA_16] = _mesa_texstore_rgba_16;
+      table[MESA_FORMAT_RGBA_16_REV] = _mesa_texstore_rgba_16;
       table[MESA_FORMAT_RED_RGTC1] = _mesa_texstore_red_rgtc1;
       table[MESA_FORMAT_SIGNED_RED_RGTC1] = _mesa_texstore_signed_red_rgtc1;
       table[MESA_FORMAT_RG_RGTC2] = _mesa_texstore_rg_rgtc2;
