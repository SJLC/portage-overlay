--- src/mesa/main/format_unpack.c.orig	2012-10-28 19:52:11.000000000 -0700
+++ src/mesa/main/format_unpack.c	2012-10-28 19:52:45.000000000 -0700
@@ -302,7 +302,7 @@
    const GLushort *s = ((const GLushort *) src);
    GLuint i;
    for (i = 0; i < n; i++) {
-      GLushort tmp = (s[i] << 8) | (s[i] >> 8); /* byteswap */
+      GLushort tmp = BSWAP16(s[i]);
       dst[i][RCOMP] = ((tmp >> 10) & 0x1f) * (1.0F / 31.0F);
       dst[i][GCOMP] = ((tmp >>  5) & 0x1f) * (1.0F / 31.0F);
       dst[i][BCOMP] = ((tmp >>  0) & 0x1f) * (1.0F / 31.0F);
@@ -416,6 +416,19 @@
 }
 
 static void
+unpack_A16_REV(const void *src, GLfloat dst[][4], GLuint n)
+{
+   const GLushort *s = ((const GLushort *) src);
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      dst[i][RCOMP] =
+      dst[i][GCOMP] =
+      dst[i][BCOMP] = 0.0F;
+      dst[i][ACOMP] = USHORT_TO_FLOAT(BSWAP16(s[i]));
+   }
+}
+
+static void
 unpack_L8(const void *src, GLfloat dst[][4], GLuint n)
 {
    const GLubyte *s = ((const GLubyte *) src);
@@ -442,6 +455,19 @@
 }
 
 static void
+unpack_L16_REV(const void *src, GLfloat dst[][4], GLuint n)
+{
+   const GLushort *s = ((const GLushort *) src);
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      dst[i][RCOMP] =
+      dst[i][GCOMP] =
+      dst[i][BCOMP] = USHORT_TO_FLOAT(BSWAP16(s[i]));
+      dst[i][ACOMP] = 1.0F;
+   }
+}
+
+static void
 unpack_I8(const void *src, GLfloat dst[][4], GLuint n)
 {
    const GLubyte *s = ((const GLubyte *) src);
@@ -468,6 +494,19 @@
 }
 
 static void
+unpack_I16_REV(const void *src, GLfloat dst[][4], GLuint n)
+{
+   const GLushort *s = ((const GLushort *) src);
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      dst[i][RCOMP] =
+      dst[i][GCOMP] =
+      dst[i][BCOMP] =
+      dst[i][ACOMP] = USHORT_TO_FLOAT(BSWAP16(s[i]));
+   }
+}
+
+static void
 unpack_YCBCR(const void *src, GLfloat dst[][4], GLuint n)
 {
    GLuint i;
@@ -570,6 +609,19 @@
 }
 
 static void
+unpack_R16_REV(const void *src, GLfloat dst[][4], GLuint n)
+{
+   const GLushort *s = ((const GLushort *) src);
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      dst[i][RCOMP] = USHORT_TO_FLOAT(BSWAP16(s[i]));
+      dst[i][GCOMP] = 0.0;
+      dst[i][BCOMP] = 0.0;
+      dst[i][ACOMP] = 1.0;
+   }
+}
+
+static void
 unpack_RG1616(const void *src, GLfloat dst[][4], GLuint n)
 {
    const GLuint *s = ((const GLuint *) src);
@@ -641,6 +693,23 @@
 }
 
 static void
+unpack_Z24_S8_REV(const void *src, GLfloat dst[][4], GLuint n)
+{
+   /* only return Z, not stencil data */
+   const GLuint *s = ((const GLuint *) src);
+   const GLfloat scale = 1.0F / (GLfloat) 0xffffff;
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      dst[i][0] =
+      dst[i][1] =
+      dst[i][2] = (BSWAP32(s[i]) >> 8) * scale;
+      dst[i][3] = 1.0F;
+      ASSERT(dst[i][0] >= 0.0F);
+      ASSERT(dst[i][0] <= 1.0F);
+   }
+}
+
+static void
 unpack_S8_Z24(const void *src, GLfloat dst[][4], GLuint n)
 {
    /* only return Z, not stencil data */
@@ -671,6 +740,19 @@
 }
 
 static void
+unpack_Z16_REV(const void *src, GLfloat dst[][4], GLuint n)
+{
+   const GLushort *s = ((const GLushort *) src);
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      dst[i][0] =
+      dst[i][1] =
+      dst[i][2] = BSWAP16(s[i]) * (1.0F / 65535.0F);
+      dst[i][3] = 1.0F;
+   }
+}
+
+static void
 unpack_X8_Z24(const void *src, GLfloat dst[][4], GLuint n)
 {
    unpack_S8_Z24(src, dst, n);
@@ -683,6 +765,12 @@
 }
 
 static void
+unpack_Z24_X8_REV(const void *src, GLfloat dst[][4], GLuint n)
+{
+   unpack_Z24_S8_REV(src, dst, n);
+}
+
+static void
 unpack_Z32(const void *src, GLfloat dst[][4], GLuint n)
 {
    const GLuint *s = ((const GLuint *) src);
@@ -866,6 +954,20 @@
 }
 
 static void
+unpack_RGBA_FLOAT32_REV(const void *src, GLfloat dst[][4], GLuint n)
+{
+   const GLuint *s = (const GLuint *) src;
+   union { GLfloat f; GLuint ui; } fui;
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      fui.ui = BSWAP32(s[i*4+0]); dst[i][RCOMP] = fui.f;
+      fui.ui = BSWAP32(s[i*4+1]); dst[i][GCOMP] = fui.f;
+      fui.ui = BSWAP32(s[i*4+2]); dst[i][BCOMP] = fui.f;
+      fui.ui = BSWAP32(s[i*4+3]); dst[i][ACOMP] = fui.f;
+   }
+}
+
+static void
 unpack_RGBA_FLOAT16(const void *src, GLfloat dst[][4], GLuint n)
 {
    const GLhalfARB *s = (const GLhalfARB *) src;
@@ -1283,6 +1385,19 @@
 }
 
 static void
+unpack_RGBA_16_REV(const void *src, GLfloat dst[][4], GLuint n)
+{
+   const GLushort *s = (const GLushort *) src;
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      dst[i][RCOMP] = USHORT_TO_FLOAT( BSWAP16(s[i*4+0]) );
+      dst[i][GCOMP] = USHORT_TO_FLOAT( BSWAP16(s[i*4+1]) );
+      dst[i][BCOMP] = USHORT_TO_FLOAT( BSWAP16(s[i*4+2]) );
+      dst[i][ACOMP] = USHORT_TO_FLOAT( BSWAP16(s[i*4+3]) );
+   }
+}
+
+static void
 unpack_RED_RGTC1(const void *src, GLfloat dst[][4], GLuint n)
 {
    /* XXX to do */
@@ -1500,25 +1615,32 @@
       table[MESA_FORMAT_RGB332] = unpack_RGB332;
       table[MESA_FORMAT_A8] = unpack_A8;
       table[MESA_FORMAT_A16] = unpack_A16;
+      table[MESA_FORMAT_A16_REV] = unpack_A16_REV;
       table[MESA_FORMAT_L8] = unpack_L8;
       table[MESA_FORMAT_L16] = unpack_L16;
+      table[MESA_FORMAT_L16_REV] = unpack_L16_REV;
       table[MESA_FORMAT_I8] = unpack_I8;
       table[MESA_FORMAT_I16] = unpack_I16;
+      table[MESA_FORMAT_I16_REV] = unpack_I16_REV;
       table[MESA_FORMAT_YCBCR] = unpack_YCBCR;
       table[MESA_FORMAT_YCBCR_REV] = unpack_YCBCR_REV;
       table[MESA_FORMAT_R8] = unpack_R8;
       table[MESA_FORMAT_GR88] = unpack_GR88;
       table[MESA_FORMAT_RG88] = unpack_RG88;
       table[MESA_FORMAT_R16] = unpack_R16;
+      table[MESA_FORMAT_R16_REV] = unpack_R16_REV;
       table[MESA_FORMAT_RG1616] = unpack_RG1616;
       table[MESA_FORMAT_RG1616_REV] = unpack_RG1616_REV;
       table[MESA_FORMAT_ARGB2101010] = unpack_ARGB2101010;
       table[MESA_FORMAT_ABGR2101010_UINT] = unpack_ABGR2101010_UINT;
       table[MESA_FORMAT_Z24_S8] = unpack_Z24_S8;
+      table[MESA_FORMAT_Z24_S8_REV] = unpack_Z24_S8_REV;
       table[MESA_FORMAT_S8_Z24] = unpack_S8_Z24;
       table[MESA_FORMAT_Z16] = unpack_Z16;
+      table[MESA_FORMAT_Z16_REV] = unpack_Z16_REV;
       table[MESA_FORMAT_X8_Z24] = unpack_X8_Z24;
       table[MESA_FORMAT_Z24_X8] = unpack_Z24_X8;
+      table[MESA_FORMAT_Z24_X8_REV] = unpack_Z24_X8_REV;
       table[MESA_FORMAT_Z32] = unpack_Z32;
       table[MESA_FORMAT_S8] = unpack_S8;
       table[MESA_FORMAT_SRGB8] = unpack_SRGB8;
@@ -1539,6 +1661,7 @@
       table[MESA_FORMAT_RGBA_DXT5] = unpack_RGBA_DXT5;
 
       table[MESA_FORMAT_RGBA_FLOAT32] = unpack_RGBA_FLOAT32;
+      table[MESA_FORMAT_RGBA_FLOAT32_REV] = unpack_RGBA_FLOAT32_REV;
       table[MESA_FORMAT_RGBA_FLOAT16] = unpack_RGBA_FLOAT16;
       table[MESA_FORMAT_RGB_FLOAT32] = unpack_RGB_FLOAT32;
       table[MESA_FORMAT_RGB_FLOAT16] = unpack_RGB_FLOAT16;
@@ -1573,6 +1696,7 @@
       table[MESA_FORMAT_SIGNED_RGB_16] = unpack_SIGNED_RGB_16;
       table[MESA_FORMAT_SIGNED_RGBA_16] = unpack_SIGNED_RGBA_16;
       table[MESA_FORMAT_RGBA_16] = unpack_RGBA_16;
+      table[MESA_FORMAT_RGBA_16_REV] = unpack_RGBA_16_REV;
 
       table[MESA_FORMAT_RED_RGTC1] = unpack_RED_RGTC1;
       table[MESA_FORMAT_SIGNED_RED_RGTC1] = unpack_SIGNED_RED_RGTC1;
@@ -2858,6 +2982,20 @@
 }
 
 static void
+unpack_float_z_Z24_X8_REV(GLuint n, const void *src, GLfloat *dst)
+{
+   /* only return Z, not stencil data */
+   const GLuint *s = ((const GLuint *) src);
+   const GLfloat scale = 1.0F / (GLfloat) 0xffffff;
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      dst[i] = (BSWAP32(s[i]) >> 8) * scale;
+      ASSERT(dst[i] >= 0.0F);
+      ASSERT(dst[i] <= 1.0F);
+   }
+}
+
+static void
 unpack_float_z_X8_Z24(GLuint n, const void *src, GLfloat *dst)
 {
    /* only return Z, not stencil data */
@@ -2882,6 +3020,16 @@
 }
 
 static void
+unpack_float_z_Z16_REV(GLuint n, const void *src, GLfloat *dst)
+{
+   const GLushort *s = ((const GLushort *) src);
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      dst[i] = BSWAP16(s[i]) * (1.0F / 65535.0F);
+   }
+}
+
+static void
 unpack_float_z_Z32(GLuint n, const void *src, GLfloat *dst)
 {
    const GLuint *s = ((const GLuint *) src);
@@ -2924,6 +3072,10 @@
    case MESA_FORMAT_Z24_X8:
       unpack = unpack_float_z_Z24_X8;
       break;
+   case MESA_FORMAT_Z24_S8_REV:
+   case MESA_FORMAT_Z24_X8_REV:
+      unpack = unpack_float_z_Z24_X8_REV;
+      break;
    case MESA_FORMAT_S8_Z24:
    case MESA_FORMAT_X8_Z24:
       unpack = unpack_float_z_X8_Z24;
@@ -2931,6 +3083,9 @@
    case MESA_FORMAT_Z16:
       unpack = unpack_float_z_Z16;
       break;
+   case MESA_FORMAT_Z16_REV:
+      unpack = unpack_float_z_Z16_REV;
+      break;
    case MESA_FORMAT_Z32:
       unpack = unpack_float_z_Z32;
       break;
@@ -2965,6 +3120,17 @@
 }
 
 static void
+unpack_uint_z_Z24_X8_REV(const void *src, GLuint *dst, GLuint n)
+{
+   /* only return Z, not stencil data */
+   const GLuint *s = ((const GLuint *) src);
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      dst[i] = (BSWAP32(s[i]) & 0xffffff00) | (s[i] >> 24);
+   }
+}
+
+static void
 unpack_uint_z_X8_Z24(const void *src, GLuint *dst, GLuint n)
 {
    /* only return Z, not stencil data */
@@ -2986,6 +3152,16 @@
 }
 
 static void
+unpack_uint_z_Z16_REV(const void *src, GLuint *dst, GLuint n)
+{
+   const GLushort *s = ((const GLushort *)src);
+   GLuint i;
+   for (i = 0; i < n; i++) {
+      dst[i] = BSWAP32(((GLuint)s[i] << 16) | s[i]);
+   }
+}
+
+static void
 unpack_uint_z_Z32(const void *src, GLuint *dst, GLuint n)
 {
    memcpy(dst, src, n * sizeof(GLuint));
@@ -3029,6 +3205,10 @@
    case MESA_FORMAT_Z24_X8:
       unpack = unpack_uint_z_Z24_X8;
       break;
+   case MESA_FORMAT_Z24_S8_REV:
+   case MESA_FORMAT_Z24_X8_REV:
+      unpack = unpack_uint_z_Z24_X8_REV;
+      break;
    case MESA_FORMAT_S8_Z24:
    case MESA_FORMAT_X8_Z24:
       unpack = unpack_uint_z_X8_Z24;
@@ -3036,6 +3216,9 @@
    case MESA_FORMAT_Z16:
       unpack = unpack_uint_z_Z16;
       break;
+   case MESA_FORMAT_Z16_REV:
+      unpack = unpack_uint_z_Z16_REV;
+      break;
    case MESA_FORMAT_Z32:
       unpack = unpack_uint_z_Z32;
       break;
@@ -3072,6 +3255,16 @@
 }
 
 static void
+unpack_ubyte_s_Z24_S8_REV(const void *src, GLubyte *dst, GLuint n)
+{
+   GLuint i;
+   const GLuint *src32 = src;
+
+   for (i = 0; i < n; i++)
+      dst[i] = BSWAP32(src32[i]) & 0xff;
+}
+
+static void
 unpack_ubyte_s_S8_Z24(const void *src, GLubyte *dst, GLuint n)
 {
    GLuint i;
@@ -3102,6 +3295,9 @@
    case MESA_FORMAT_Z24_S8:
       unpack_ubyte_s_Z24_S8(src, dst, n);
       break;
+   case MESA_FORMAT_Z24_S8_REV:
+      unpack_ubyte_s_Z24_S8_REV(src, dst, n);
+      break;
    case MESA_FORMAT_S8_Z24:
       unpack_ubyte_s_S8_Z24(src, dst, n);
       break;
@@ -3132,6 +3328,16 @@
    memcpy(dst, src, n * 4);
 }
 
+static void
+unpack_uint_24_8_depth_stencil_Z24_S8_REV(const GLuint *src, GLuint *dst, GLuint n)
+{
+   GLuint i;
+
+   for (i = 0; i < n; i++) {
+      dst[i] = BSWAP32(src[i]);
+   }
+}
+
 void
 _mesa_unpack_uint_24_8_depth_stencil_row(gl_format format, GLuint n,
 					 const void *src, GLuint *dst)
@@ -3140,6 +3346,9 @@
    case MESA_FORMAT_Z24_S8:
       unpack_uint_24_8_depth_stencil_Z24_S8(src, dst, n);
       break;
+   case MESA_FORMAT_Z24_S8_REV:
+      unpack_uint_24_8_depth_stencil_Z24_S8_REV(src, dst, n);
+      break;
    case MESA_FORMAT_S8_Z24:
       unpack_uint_24_8_depth_stencil_S8_Z24(src, dst, n);
       break;
