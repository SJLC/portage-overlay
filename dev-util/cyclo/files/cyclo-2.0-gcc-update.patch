diff --git a/lib.C b/lib.C
index 7f49d9d..d62c23e 100644
--- a/lib.C
+++ b/lib.C
@@ -16,14 +16,16 @@ third party claims) arising therefrom.
 */
 
 #include <stdlib.h>
-#include <iostream.h>
+#include <iostream>
 #include <string.h>
 #include "lib.h"
 
+using namespace std;
+
 extern "C" // called from 'C' scan.c
 {
 
-char *strndup(char *str, int n)
+char *my_strndup(char *str, int n)
 {
 	char *t, *t2;
 	t2=t=(char *)malloc(n+1*sizeof(char));
@@ -42,7 +44,7 @@ char *strndup(char *str, int n)
 
 char *getfunc(char *str, int n)
 {
-	char *t=strndup(str, n-1); /* leave off terminating parenthesis */
+	char *t=my_strndup(str, n-1); /* leave off terminating parenthesis */
 	char *t2=t;
 
 	while(*t)
@@ -56,7 +58,7 @@ char *getfunc(char *str, int n)
 
 char *getarg(char *str, int n, char *keyword)
 {
-	char *t=strndup(str, n);
+	char *t=my_strndup(str, n);
 	char *t2=t;
 
 	strcpy(t, t+strlen(keyword)); /* remove keyword */
@@ -72,7 +74,7 @@ char *getarg(char *str, int n, char *keyword)
 
 char *getlabel(char *str, int n)
 {
-	char *t=strndup(str, n-1); /* remove trailing ':' */
+	char *t=my_strndup(str, n-1); /* remove trailing ':' */
 	char *t2=t;
 
 	while(*t)
diff --git a/lib.h b/lib.h
index 01c3958..0e92255 100644
--- a/lib.h
+++ b/lib.h
@@ -20,7 +20,7 @@ extern "C"
 {
 #endif
 
-char *strndup(char *, int);
+char *my_strndup(char *, int);
 char *getfunc(char *, int);
 char *getarg(char *, int, char *);
 char *getlabel(char *, int);
diff --git a/main.C b/main.C
index d3c5ac8..ddab39e 100644
--- a/main.C
+++ b/main.C
@@ -15,12 +15,14 @@ third party claims) arising therefrom.
 
 */
 
-#include <iostream.h>
+#include <iostream>
 #include <stdio.h>
-#include <iomanip.h>
+#include <iomanip>
 #include <stdlib.h>
 #include <string.h>
 
+using namespace std;
+
 #define extern			/* instantiate lexer variables */
 #include "tokens.h"
 #undef extern
@@ -239,7 +241,7 @@ int rd_scudefinition(int parse, int startat, Info &jumps)
   if(end==-1) return end;
 
   if(end>=tokenlist.Count() || tokenlist[end].type!=ENDSCOPE)
-    PARSEFAIL("No terminating '}' found", startat);
+      PARSEFAIL((char *)"No terminating '}' found", startat);
 
   scustack.Pop();
 
@@ -254,10 +256,10 @@ int rd_topscope(int parse, int startat, Info &jumps)
 
   check(rd_buffer(parse, startat+1, jumps));
   if(end==-1 || end>=tokenlist.Count()) 
-    PARSEFAIL("Invalid scope contents", startat);
+    PARSEFAIL((char *)"Invalid scope contents", startat);
 
   if(tokenlist[end].type!=ENDSCOPE)
-    PARSEFAIL("No terminating '}' found", startat);
+    PARSEFAIL((char *)"No terminating '}' found", startat);
 
   return end+1;
 }
@@ -301,10 +303,10 @@ int rd_functiondefinition(int parse, int startat, Info &jumps)
   check(rd_statements(0, startat+2, jumps));
 again:
   if(end==-1)
-    PARSEFAIL("Unrecognised function body", startat);
+    PARSEFAIL((char *)"Unrecognised function body", startat);
 
   if(end>=tokenlist.Count() || tokenlist[end].type!=ENDSCOPE)
-    PARSEFAIL("Function body has no terminating '}'", startat);
+    PARSEFAIL((char *)"Function body has no terminating '}'", startat);
 
   if(scustack.Size() && ignoreinline)
     parse=0;
@@ -410,7 +412,7 @@ int rd_statement(int parse, int startat, Info &jumps)
         AddPlace(jumps, startat);
       return startat+1;
     default:
-      PARSEFAIL("Unexpected token", startat);
+      PARSEFAIL((char *)"Unexpected token", startat);
     }
     startat++;
   }
@@ -428,19 +430,19 @@ int rd_scope(int parse, int startat, Info &jumps)
     AddPlace(jumps, startat);
   check(rd_statements(0, startat+1, jumps));
   if(end==-1 || end>=tokenlist.Count() || tokenlist[end].type!=ENDSCOPE)
-    PARSEFAIL("Scope has no closing '}'", startat);
+    PARSEFAIL((char *)"Scope has no closing '}'", startat);
   if(parse)
     {
       check(rd_statements(parse, startat+1, jumps));
       if(end==-1 || end>=tokenlist.Count() || tokenlist[end].type!=ENDSCOPE)
-         PARSEFAIL("Scope has no closing '}'", startat);
+         PARSEFAIL((char *)"Scope has no closing '}'", startat);
       AddPlace(jumps, end);
     }
   return end+1;
 }
 
 /* Ensures that there was a following statement */
-#define HASSTATEMENT(x) { if(end==-1 || end>=tokenlist.Count()) PARSEFAIL("'" x "' has no following ';' or '{'..'}'", startat); }
+#define HASSTATEMENT(x) { if(end==-1 || end>=tokenlist.Count()) PARSEFAIL((char *)"'" x "' has no following ';' or '{'..'}'", startat); }
 
 int rd_while(int parse, int startat, Info &jumps)
 {
@@ -620,7 +622,7 @@ again:
           AddToPlace(jumps, startat, a);
 
       if(a<jumps.function->end)
-        PARSEFAIL("Label not found", startat);
+        PARSEFAIL((char *)"Label not found", startat);
       check(rd_statement(parse, startat+1, jumps));
       parse=0;
       goto again;
@@ -673,7 +675,7 @@ int rd_do(int parse, int startat, Info &jumps)
   HASSTATEMENT("do");
 /*
   if(tokenlist[end].type!=WHILE)
-    PARSEFAIL("Expecting 'while' after 'do'", end);
+    PARSEFAIL((char *)"Expecting 'while' after 'do'", end);
 */
   int whileat=end;
   check(rd_statement(0, end+1, jumps));
@@ -712,7 +714,7 @@ int rd_default(int parse, int startat, Info &jumps)
     {
 /*
       if(jumps.iswitch==-1)
-        PARSEFAIL("No enclosing switch statement", startat);
+        PARSEFAIL((char *)"No enclosing switch statement", startat);
 */
       AddPlace(jumps, startat);
       check(rd_statement(parse, startat+1, jumps));
@@ -736,7 +738,7 @@ int rd_case(int parse, int startat, Info &jumps)
     {
 /*
       if(jumps.iswitch==-1)
-        PARSEFAIL("No enclosing switch statement", startat);
+        PARSEFAIL((char *)"No enclosing switch statement", startat);
 */
       AddPlace(jumps, startat);
       check(rd_statement(parse, startat+1, jumps));
@@ -759,7 +761,7 @@ int rd_break(int parse, int startat, Info &jumps)
     {
 /*
       if(jumps.ibreak==-1)
-        PARSEFAIL("No enclosing loop to break from", startat);
+        PARSEFAIL((char *)"No enclosing loop to break from", startat);
 */
       AddPlace(jumps, startat,0);
       AddToPlace(jumps, startat, jumps.ibreak);
@@ -782,7 +784,7 @@ int rd_continue(int parse, int startat, Info &jumps)
     {
 /*
       if(jumps.icontinue==-1)
-        PARSEFAIL("No enclosing loop to continue from", startat);
+        PARSEFAIL((char *)"No enclosing loop to continue from", startat);
 */
       AddPlace(jumps, startat,0);
       AddToPlace(jumps, startat, jumps.icontinue);
@@ -801,7 +803,7 @@ cyclo (void)
 
   x=rd_buffer(1, 0, i);
   if(x>=0 && x<tokenlist.Count())
-    parsefail("Unexpected token at top level", x);
+    parsefail((char *)"Unexpected token at top level", x);
   if(x!=tokenlist.Count()) exit(1);
 }
 
diff --git a/tokens.h b/tokens.h
index 7e3ab4c..7d94a44 100644
--- a/tokens.h
+++ b/tokens.h
@@ -44,11 +44,9 @@ enum TOKENS
 	ELSEIF
 };
 
-extern union
+extern union YY_LVAL
 {
   char *yy_str;
-}
-
-yylval;
+} yylval;
 
 extern int atelparen;
--- a/strerror.h.orig	1995-01-12 00:17:06.000000000 -0800
+++ a/strerror.h	2011-02-04 16:58:11.000000000 -0800
@@ -1,4 +1,7 @@
 
 /* strerror.h */
 
+#include <stdio.h>
+#include <string.h>
+
 char *strerror(/* int err */);
--- a/strerror.c.orig	2011-02-04 17:14:03.000000000 -0800
+++ a/strerror.c	2011-02-04 17:14:49.000000000 -0800
@@ -16,7 +16,7 @@
 {
 
   extern int sys_nerr;
-  extern char *sys_errlist[];
+  extern const char *const sys_errlist[];
 
   static char errmsg[256];
 
@@ -35,7 +35,7 @@
         int err;
 {
         extern int sys_nerr;
-        extern char *sys_errlist[];
+        extern const char *const sys_errlist[];
 
         static char errmsg[32];
 
